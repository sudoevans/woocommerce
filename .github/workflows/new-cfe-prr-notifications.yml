name: New CFE/PRR workflow notifications
on:
  issues:
    types: [labeled]

permissions: {}

jobs:
  prep:
    if: github.event.label.name == 'code freeze exception' || github.event.label.name == 'point release request' || github.event.label.name == 'Approved' || github.event.label.name == 'Rejected'
    runs-on: ubuntu-20.04
    outputs:
      pr_number: ${{ steps.extract-pr.outputs.PR_NUMBER }}
    steps:
      - name: Extract PR number from issue body
        id: extract-pr
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body;

            // Regular expression to match the PR link that follows the specific question
            const prRegex = /Which PR needs to be included\?.*?\n(https:\/\/github\.com\/[a-zA-Z0-9_\-]+\/[a-zA-Z0-9_\-]+\/pull\/([0-9]+))/s;

            // Match the body against the regex
            const match = body.match(prRegex);

            // Check if a valid PR number was found
            if (match && match[2]) {
              const prNumber = match[2];

              // Log the PR number and set it as a GitHub output
              console.log(`Valid PR number: ${prNumber}`);
              core.setOutput('PR_NUMBER', prNumber);
            } else {
              // If no valid PR number is found, fail the step
              core.setFailed("No valid PR found after the 'Which PR' section. Aborting.");
            }

  verify:
    if: github.event.label.name == 'code freeze exception' || github.event.label.name == 'point release request' || github.event.label.name == 'Approved'
    runs-on: ubuntu-20.04
    outputs:
      release_number: ${{ steps.extract-release.outputs.RELEASE_NUMBER }}
    permissions:
      issues: write
    needs:
      - prep
    steps:
      - name: Fetch PR details and verify the base_ref starts with release/
        id: verify-pr
        env:
          PR_NUMBER: ${{ needs.prep.outputs.pr_number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/github-script@v7
        with:
          script: |
            const issueUrl = context.payload.issue.html_url;
            const issueTitle = context.payload.issue.title;
            const labelName = context.payload.label?.name;
            let prData;

            try {
              prData = await github.rest.pulls.get({
                owner: context.repo.owner,
              repo: context.repo.repo,
                pull_number: process.env.PR_NUMBER
              });
            } catch (error) {
              core.setOutput('SLACK_MESSAGE', '');
              core.setOutput('GITHUB_COMMENT', 'We couldn\'t find the PR you entered with the request. Please check if the PR number is correct.');
              core.setFailed('Error fetching PR data. Please check if the PR number is correct.');
              //skip the rest of the step
              return;
            }

            // added this for debugging
            console.log(prData);

            const baseRefName = prData.data.base.ref;
            core.setOutput('PR_BASE_REF', '');

            console.log(`PR base ref: ${baseRefName}`);
           
            if (!baseRefName.startsWith('release/')) {
              core.setFailed('The PR base_ref must start with release/.');

              core.setOutput(
                  'SLACK_MESSAGE',
                  `:x: We did not process your ${labelName === 'code freeze exception' ? 'Code Freeze Exception' : 'Point Release Request'} because the PR associated with the request does not originate from the release branch. Please update the PR base to the release branch and submit a new request. The current base branch is: \`${baseRefName}\`.\n\n${issueTitle} ${issueUrl}`
              );

              core.setOutput(
                  'GITHUB_COMMENT',
                  'We did not process your request because the PR you entered with the request does not originate from the release branch. Please switch your PR base to the target release branch and open a new request.'
              );
              return;
            } else {
              try {
                // verify if the branch exists on github remote
                await github.request( 'GET /repos/{owner}/{repo}/branches/{branch}', {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  branch: baseRefName,
                } );
              } catch (error) {
                core.setFailed('The PR base_ref does not exist.');

                core.setOutput(
                  'SLACK_MESSAGE',
                  `:x: We did not process your ${labelName === 'code freeze exception' ? 'Code Freeze Exception' : 'Point Release Request'} because the release branch does not exist. Please check if your PR base originates from the target release branch. The current release branch is: \`${baseRefName}\`.\n\n${issueTitle} ${issueUrl}`
                );

                core.setOutput(
                  'GITHUB_COMMENT',
                  'We did not process your request because the target release branch does not exist for the PR you mentioned. Please check if your PR base originates from the target release branch and create a new request.'
                );

                return;
              }

              core.setOutput('PR_BASE_REF', baseRefName);
            }

      - name: Extract and verify the release number
        id: extract-release
        if: ${{ steps.verify-pr.outputs.PR_BASE_REF != '' }}
        env:
          PR_BASE_REF: ${{ steps.verify-pr.outputs.PR_BASE_REF }}
        uses: actions/github-script@v7
        with:
          script: |
            const issueUrl = context.payload.issue.html_url;
            const issueTitle = context.payload.issue.title;
            const labelName = context.payload.label?.name;

            const baseRef = process.env.PR_BASE_REF;
            console.log("baseRef:", baseRef);

            const releaseNumber = baseRef.split('/')[1];
            console.log("releaseNumber:", releaseNumber);
          
            const releaseRegex = /([0-9]+\.[0-9]+)/;
            const match = releaseNumber.match(releaseRegex);
            if (match && match[1]) {
              const releaseNumber = match[1];
              core.setOutput('RELEASE_NUMBER', releaseNumber);
            } else {
              core.setFailed('No valid release number found after the release branch name.');

              core.setOutput(
                'SLACK_MESSAGE',
                `:x: We did not process your ${labelName === 'code freeze exception' ? 'Code Freeze Exception' : 'Point Release Request'} because the release number doesn't seem to be correct. Please check if your PR base originates from the target release branch. The current release branch is: \`${baseRef}\`.\n\n${issueTitle} ${issueUrl}`
              );

              core.setOutput(
                'GITHUB_COMMENT',
                'We did not process your request because the release number doesn\'t seem to be correct. Please check if your PR base originates from the target release branch and create a new request.'
              );
            }

      - name: Notify Slack
        uses: archive/github-actions-slack@v2.0.0
        if: ${{ failure() && (steps.verify-pr.outputs.SLACK_MESSAGE != '' || steps.extract-release.outputs.SLACK_MESSAGE != '') }}
        id: notify
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.CODE_FREEZE_BOT_TOKEN }}
          slack-channel: ${{ secrets.WOO_RELEASE_SLACK_CHANNEL }}
          slack-text: ${{ steps.verify-pr.outputs.SLACK_MESSAGE || steps.extract-release.outputs.SLACK_MESSAGE }}
          slack-optional-unfurl_links: false
          slack-optional-unfurl_media: false

      - name: Remove the label(s)
        if: ${{ failure() }}
        env:
          ISSUE_URL: ${{ github.event.issue.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit "$ISSUE_URL" --remove-label "code freeze exception"
          gh issue edit "$ISSUE_URL" --remove-label "point release request"

      - name: Close the issue
        if: ${{ failure() }}
        env:
          ISSUE_URL: ${{ github.event.issue.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close "$ISSUE_URL" --comment "${{ steps.verify-pr.outputs.GITHUB_COMMENT || steps.extract-release.outputs.GITHUB_COMMENT }}"

  apply-milestone:
    if: github.event.label.name == 'code freeze exception' || github.event.label.name == 'point release request' || github.event.label.name == 'Approved' || github.event.label.name == 'Rejected'
    runs-on: ubuntu-20.04
    permissions:
      issues: write
    needs:
      - verify
    steps:
      - name: Apply Milestone to the Issue
        env:
          MILESTONE: ${{ needs.verify.outputs.release_number }}.0
          ISSUE_URL: ${{ github.event.issue.html_url }}
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Applying milestone: $MILESTONE"
          gh issue edit "$ISSUE_URL" --milestone "$MILESTONE"

  cfe-created:
    if: github.event.label.name == 'code freeze exception' || github.event.label.name == 'point release request'
    runs-on: ubuntu-20.04
    needs:
      - verify
    permissions:
      issues: write
    env:
      RELEASE_NUMBER: ${{ needs.verify.outputs.release_number }}
    steps:
      - name: Set Slack Message
        id: set-message
        uses: actions/github-script@v7
        with:
          script: |
            const event = context.payload;
            const labelName = event.label?.name;
            const issueTitle = event.issue.title;
            const issueUrl = event.issue.html_url;
            
            const slackMessage = `:arrow_right: ${labelName === 'code freeze exception' ? ':ice_cube: New Code Freeze Exception request' : ':release: New Point Release Request'}: ${issueTitle} ${issueUrl}`;

            const githubComment = `IMPORTANT: Your request for a ${labelName === 'code freeze exception' ? 'Code Freeze Exception' : 'Point Release'} has been successfully created and is pending approval from @woocommerce/solaris.\n\nPlease be aware that you are targeting your fix for WC version: **${process.env.RELEASE_NUMBER}**, based on the base branch of your PR you entered with the request.`;
            
            // Set the message as a core output
            core.setOutput('SLACK_MESSAGE', slackMessage);
            core.setOutput('GITHUB_COMMENT', githubComment);
      - name: Notify Slack
        uses: archive/github-actions-slack@v2.0.0
        id: notify
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.CODE_FREEZE_BOT_TOKEN }}
          slack-channel: ${{ secrets.WOO_RELEASE_SLACK_CHANNEL }}
          slack-text: ${{ steps.set-message.outputs.SLACK_MESSAGE }}
          slack-optional-unfurl_links: false
          slack-optional-unfurl_media: false
        continue-on-error: true

      - name: Add comment to the issue
        env:
          ISSUE_URL: ${{ github.event.issue.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue comment "$ISSUE_URL" --body "${{ steps.set-message.outputs.GITHUB_COMMENT }}"

  request-approved:
    if: ${{ github.event.label.name == 'Approved' }}
    runs-on: ubuntu-20.04
    permissions:
      pull-requests: write
      issues: write
    needs:
      - prep
      - verify
    steps:
      - name: Add label 'cherry pick to trunk' to PR
        env:
          OWNER: ${{ github.event.repository.owner.login }}
          REPO: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ needs.prep.outputs.pr_number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr edit $PR_NUMBER --add-label "cherry pick to trunk" --repo "$OWNER/$REPO"

      - name: Add label 'cherry pick to frozen release' to PR
        if: contains(github.event.issue.labels.*.name, 'point release request')
        env:
          OWNER: ${{ github.event.repository.owner.login }}
          REPO: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ needs.prep.outputs.pr_number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr edit $PR_NUMBER --add-label "cherry pick to frozen release" --repo "$OWNER/$REPO"

      - name: Comment issue has been approved
        env:
          ISSUE_URL: ${{ github.event.issue.html_url }}
          GH_TOKEN: ${{ github.token }}
          RELEASE_NUMBER: ${{ needs.verify.outputs.release_number }}
        run: |
          gh issue comment "$ISSUE_URL" --body "This request has been approved. Please merge the PR to release branch when it is approved and ready to be merged.

          You are targeting your fix for WC version: **${RELEASE_NUMBER}**."

      - name: Set Slack Message
        id: set-message
        uses: actions/github-script@v7
        with:
          script: |
            const event = context.payload;
            const issueTitle = event.issue.title;
            const issueUrl = event.issue.html_url;
            const message = `:white_check_mark: Request approved: ${issueTitle} ${issueUrl}`;

            core.setOutput('SLACK_MESSAGE', message);

      - name: Notify Slack
        uses: archive/github-actions-slack@v2.0.0
        id: notify
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.CODE_FREEZE_BOT_TOKEN }}
          slack-channel: ${{ secrets.WOO_RELEASE_SLACK_NOTIFICATION_CHANNEL }}
          slack-text: ${{ steps.set-message.outputs.SLACK_MESSAGE }}
          slack-optional-unfurl_links: false
          slack-optional-unfurl_media: false
        continue-on-error: true

  request-rejected:
    if: ${{ github.event.label.name == 'Rejected' }}
    runs-on: ubuntu-20.04
    permissions:
      issues: write
    steps:
      - name: Close the request
        env:
          ISSUE_URL: ${{ github.event.issue.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close "$ISSUE_URL" --comment "Closing issue as the request is rejected - $ISSUE_URL. Please switch the base to trunk (or frozen release in case this need to be raised as a CFE) and merge your PR."

      - name: Set Slack Message
        id: set-message
        uses: actions/github-script@v7
        with:
          script: |
            const event = context.payload;
            const issueTitle = event.issue.title;
            const issueUrl = event.issue.html_url;

            const message = `:x: Request rejected: ${issueTitle} ${issueUrl}`;

            core.setOutput('SLACK_MESSAGE', message);


      - name: Notify Slack
        uses: archive/github-actions-slack@v2.0.0
        id: notify
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.CODE_FREEZE_BOT_TOKEN }}
          slack-channel: ${{ secrets.WOO_RELEASE_SLACK_NOTIFICATION_CHANNEL }}
          slack-text: ${{ steps.set-message.outputs.SLACK_MESSAGE }}
          slack-optional-unfurl_links: false
          slack-optional-unfurl_media: false
        continue-on-error: true
